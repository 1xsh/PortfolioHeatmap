package com.PortfolioHeatmap.models;

/**
 * Represents a user in the application, implementing Spring Security's UserDetails interface
 * for authentication and authorization. This class is a JPA entity mapped to the "users" table
 * in the database.
 * 
 * @author [Marvel Bana]
 */
import jakarta.persistence.*;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.userdetails.UserDetails;

import java.util.Collection;
import java.util.Collections;

@Entity
@Table(name = "users")
public class User implements UserDetails {
    // Primary key for the user, auto-generated by the database.
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    // The username of the user, stored in the "username" column.
    @Column(name = "username")
    private String username;

    // The password of the user, stored in the "password" column.
    @Column(name = "password")
    private String password;

    // The email of the user, stored in the "email" column.
    @Column(name = "email", unique = true)
    private String email;

    // Getters and Setters

    // Getter for the user ID.
    public Long getId() {
        return id;
    }

    // Setter for the user ID.
    public void setId(Long id) {
        this.id = id;
    }

    // Setter for the username.
    public void setUsername(String username) {
        this.username = username;
    }

    // Setter for the password.
    public void setPassword(String password) {
        this.password = password;
    }

    // Setter for the email.
    public void setEmail(String email) {
        this.email = email;
    }

    // Getter for the email.
    public String getEmail() {
        return email;
    }

    // UserDetails methods

    // Returns the username for Spring Security authentication.
    @Override
    public String getUsername() {
        return username;
    }

    // Returns the password for Spring Security authentication.
    @Override
    public String getPassword() {
        return password;
    }

    // Returns the authorities (roles) for the user.
    // Currently returns an empty list, as roles are not implemented.
    @Override
    public Collection<? extends GrantedAuthority> getAuthorities() {
        return Collections.emptyList(); // Add roles if needed
    }

    // Indicates whether the user's account is non-expired.
    // Always returns true, as account expiration is not implemented.
    @Override
    public boolean isAccountNonExpired() {
        return true;
    }

    // Indicates whether the user's account is non-locked.
    // Always returns true, as account locking is not implemented.
    @Override
    public boolean isAccountNonLocked() {
        return true;
    }

    // Indicates whether the user's credentials are non-expired.
    // Always returns true, as credential expiration is not implemented.
    @Override
    public boolean isCredentialsNonExpired() {
        return true;
    }

    // Indicates whether the user account is enabled.
    // Always returns true, as account disabling is not implemented.
    @Override
    public boolean isEnabled() {
        return true;
    }
}